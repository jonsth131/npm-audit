export type VulnerabilityResult = {
    hasVulnerabilities: boolean;
    breakBuild: boolean;
};

export enum OutputType {
    Standard,
    Json
}

export type Vulnerabilities = {
    info: number;
    low: number;
    moderate: number;
    high: number;
    critical: number;
    total: number;
}

export type Metadata = {
    vulnerabilities: Vulnerabilities;
}

export type JsonOutput = {
    metadata: Metadata;
}

export function checkOutputForVulnerabilities(
    result: string,
    level: string,
    outputType: OutputType,
): VulnerabilityResult {
    return outputType === OutputType.Json
        ? checkJsonOutputForVulnerabilities(result, level)
        : checkStandardOutputForVulnerabilities(result, level);
}

function checkStandardOutputForVulnerabilities(result: string, level: string): VulnerabilityResult {
    const regexp: RegExp = getLevelRegexp(level);
    const vulnerabilityRegex: RegExp = new RegExp(/\d{1,6} (low|moderate|high|critical)/gm);
    const found: boolean = vulnerabilityRegex.test(result);
    const breakBuild: boolean = regexp.test(result);

    return { hasVulnerabilities: found, breakBuild }
}

function getLevelRegexp(level: string): RegExp {
    if (level === "low") {
        return new RegExp(/\d{1,6} (low|moderate|high|critical)/gm);
    }
    if (level === "moderate") {
        return new RegExp(/\d{1,6} (moderate|high|critical)/gm);
    }
    if (level === "high") {
        return new RegExp(/\d{1,6} (high|critical)/gm);
    }
    if (level === "critical") {
        return new RegExp(/\d{1,6} critical/gm);
    }

    throw new Error("Unexpected level");
}

function checkJsonOutputForVulnerabilities(result: string, level: string): VulnerabilityResult {
    const json: JsonOutput = JSON.parse(result);
    const breakBuild = checkJsonOutputForVulnerabilitiesByLevel(json, level);
    return { hasVulnerabilities: json.metadata.vulnerabilities.total > 0, breakBuild }
}

function checkJsonOutputForVulnerabilitiesByLevel(json: JsonOutput, level: string): boolean {
    if (level === "low") {
        return json.metadata.vulnerabilities.low > 0
            || json.metadata.vulnerabilities.moderate > 0
            || json.metadata.vulnerabilities.high > 0
            || json.metadata.vulnerabilities.critical > 0;
    }
    if (level === "moderate") {
        return json.metadata.vulnerabilities.moderate > 0
            || json.metadata.vulnerabilities.high > 0
            || json.metadata.vulnerabilities.critical > 0;
    }
    if (level === "high") {
        return json.metadata.vulnerabilities.high > 0
            || json.metadata.vulnerabilities.critical > 0;
    }
    if (level === "critical") {
        return json.metadata.vulnerabilities.critical > 0;
    }

    throw new Error("Unexpected level");
}
